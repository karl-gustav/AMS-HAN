package main

import (
	"encoding/json"
	"fmt"

	ams "bitbucket.org/karlgustav/ams-han"
)

func main() {
	c := testChannel()
	next := ams.ByteReader(c)
	for {
		bytePackage, err := next()
		if err != nil {
			fmt.Println(err)
			if err == ams.CHANNEL_IS_CLOSED_ERROR {
				return
			}
			continue
		}
		message, err := ams.BytesParser(bytePackage)
		if err != nil {
			fmt.Println(err)
			continue
		}
		j, _ := json.Marshal(message)
		fmt.Printf("%s\n", j)
	}
}

func testChannel() chan byte {
	output := make(chan byte)
	type18 := []byte{0x7e, 0xa0, 0x9a, 0x01, 0x02, 0x01, 0x10, 0xaa, 0xa5, 0xe6, 0xe7, 0x00, 0x0f, 0x40, 0x00, 0x00, 0x00, 0x09, 0x0c, 0x07, 0xe2, 0x05, 0x1a, 0x06, 0x15, 0x00, 0x0a, 0xff, 0x80, 0x00, 0x00, 0x02, 0x12, 0x09, 0x07, 0x4b, 0x46, 0x4d, 0x5f, 0x30, 0x30, 0x31, 0x09, 0x10, 0x36, 0x39, 0x37, 0x30, 0x36, 0x33, 0x31, 0x34, 0x30, 0x31, 0x34, 0x36, 0x38, 0x38, 0x30, 0x33, 0x09, 0x07, 0x4d, 0x41, 0x33, 0x30, 0x34, 0x48, 0x34, 0x06, 0x00, 0x00, 0x04, 0x3e, 0x06, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x02, 0x27, 0x06, 0x00, 0x00, 0x0c, 0x57, 0x06, 0x00, 0x00, 0x07, 0x14, 0x06, 0x00, 0x00, 0x02, 0xe6, 0x06, 0x00, 0x00, 0x09, 0x6b, 0x06, 0x00, 0x00, 0x09, 0x87, 0x06, 0x00, 0x00, 0x09, 0x7d, 0x09, 0x0c, 0x07, 0xe2, 0x05, 0x1a, 0x06, 0x15, 0x00, 0x0a, 0xff, 0x80, 0x00, 0x00, 0x06, 0x01, 0x3a, 0x28, 0xcf, 0x06, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x13, 0x00, 0x06, 0x00, 0x1c, 0xd0, 0x52, 0x89, 0x6b, 0x7e}
	type13 := []byte{0x7e, 0xa0, 0x78, 0x01, 0x02, 0x01, 0x10, 0xc4, 0x98, 0xe6, 0xe7, 0x00, 0x0f, 0x40, 0x00, 0x00, 0x00, 0x09, 0x0c, 0x07, 0xe2, 0x05, 0x19, 0x05, 0x0c, 0x2b, 0x0a, 0xff, 0x80, 0x00, 0x00, 0x02, 0x0d, 0x09, 0x07, 0x4b, 0x46, 0x4d, 0x5f, 0x30, 0x30, 0x31, 0x09, 0x10, 0x36, 0x39, 0x37, 0x30, 0x36, 0x33, 0x31, 0x34, 0x30, 0x31, 0x34, 0x36, 0x38, 0x38, 0x30, 0x33, 0x09, 0x07, 0x4d, 0x41, 0x33, 0x30, 0x34, 0x48, 0x34, 0x06, 0x00, 0x00, 0x02, 0xa0, 0x06, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x01, 0xb8, 0x06, 0x00, 0x00, 0x08, 0x5e, 0x06, 0x00, 0x00, 0x06, 0x1a, 0x06, 0x00, 0x00, 0x01, 0x7b, 0x06, 0x00, 0x00, 0x09, 0x56, 0x06, 0x00, 0x00, 0x09, 0x66, 0x06, 0x00, 0x00, 0x09, 0x5a, 0x36, 0x45, 0x7e}
	type1 := []byte{0x7e, 0xa0, 0x27, 0x01, 0x02, 0x01, 0x10, 0x5a, 0x87, 0xe6, 0xe7, 0x00, 0x0f, 0x40, 0x00, 0x00, 0x00, 0x09, 0x0c, 0x07, 0xe2, 0x05, 0x1b, 0x07, 0x13, 0x25, 0x26, 0xff, 0x80, 0x00, 0x00, 0x02, 0x01, 0x06, 0x00, 0x00, 0x03, 0x52, 0x81, 0x3d, 0x7e}

	go func() {
		for _, b := range append(append(type1, type13...), type18...) {
			output <- b
		}
		close(output)
	}()

	return output
}
